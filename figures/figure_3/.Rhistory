### PC2
plot2 <- plot + ggtitle(paste("PC2 [",round(proc$percent[2],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC2 * sdPC2
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot2 <- plot2 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
### PC3
plot3 <- plot + ggtitle(paste("PC3 [",round(proc$percent[3],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC3 * sdPC3
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot3 <- plot3 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1, nrow=3) pcaplot, ncol=2)
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1) pcaplot, ncol=2)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(magrittr)
library(gridExtra)
library(rmarkdown)
library(shapes)
library(geomorph)
grid.arrange(arrangeGrob(plot1, plot2, plot3), ncol=1) pcaplot, ncol=2)
grid.arrange(pcaplot, arrangeGrob(plot1, plot2, plot3), ncol=1), ncol=2)
grid.arrange(pcaplot, arrangeGrob(plot1, plot2, plot3, ncol=1), ncol=2)
plot1 <- plot + ggtitle(paste("PC1 [",round(proc$percent[1],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC1 * sdPC1
k <- length(proc$mshape[,1])
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot1 <- plot1 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
plot <- ggplot(data = shape, aes(x=x, y=y))
for(i in 1:proc$n){
temp <- data.frame(x=proc$rotated[,1,i], y=-proc$rotated[,2,i])
plot <- plot + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour="#00000030")
}
plot <- plot + geom_polygon(fill="transparent", size=2, colour="#00000080")  + theme_bw()
devs <- c(-3, 3)
col <- c("#FF605D", "#00B94E")
plot1 <- plot + ggtitle(paste("PC1 [",round(proc$percent[1],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC1 * sdPC1
k <- length(proc$mshape[,1])
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot1 <- plot1 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
rotPC1 <-  proc$pcar[, 1]
rotPC2 <-  proc$pcar[, 2]
rotPC3 <-  proc$pcar[, 3]
sdPC1 <- proc$pcasd[1]
sdPC2 <- proc$pcasd[2]
sdPC3 <- proc$pcasd[3]
plot <- ggplot(data = shape, aes(x=x, y=y))
for(i in 1:proc$n){
temp <- data.frame(x=proc$rotated[,1,i], y=-proc$rotated[,2,i])
plot <- plot + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour="#00000030")
}
plot <- plot + geom_polygon(fill="transparent", size=2, colour="#00000080")  + theme_bw()
devs <- c(-3, 3)
col <- c("#FF605D", "#00B94E")
myData <- readland.tps("data/root-data-shape.tps", specID = "ID")
temp <- read.csv("data/root-data-shape.csv")
classifier <- data.frame(name=temp$image)
for(i in 1:nrow(classifier)){
temp <- strsplit(as.character(classifier$name[i]), "-")
classifier$genotype[i] <- temp[[1]][3]
classifier$treatment[i] <- temp[[1]][4]
}
proc <- procGPA(myData)
classifier$PC1 <- proc$scores[,1]
classifier$PC2 <- proc$scores[,2]
classifier$PC3 <- proc$scores[,3]
shape <- data.frame(x = proc$mshape[,1], y = -proc$mshape[,2])
rotPC1 <-  proc$pcar[, 1]
rotPC2 <-  proc$pcar[, 2]
rotPC3 <-  proc$pcar[, 3]
sdPC1 <- proc$pcasd[1]
sdPC2 <- proc$pcasd[2]
sdPC3 <- proc$pcasd[3]
plot <- ggplot(data = shape, aes(x=x, y=y))
for(i in 1:proc$n){
temp <- data.frame(x=proc$rotated[,1,i], y=-proc$rotated[,2,i])
plot <- plot + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour="#00000030")
}
plot <- plot + geom_polygon(fill="transparent", size=2, colour="#00000080")  + theme_bw()
devs <- c(-3, 3)
col <- c("#FF605D", "#00B94E")
plot1 <- plot + ggtitle(paste("PC1 [",round(proc$percent[1],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC1 * sdPC1
k <- length(proc$mshape[,1])
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot1 <- plot1 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
plot2 <- plot + ggtitle(paste("PC2 [",round(proc$percent[2],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC2 * sdPC2
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot2 <- plot2 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
plot3 <- plot + ggtitle(paste("PC3 [",round(proc$percent[3],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC3 * sdPC3
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot3 <- plot3 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(pcaplot, arrangeGrob(plot1, plot2, plot3, ncol=1), ncol=2)
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, colour = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- ggplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- ggplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=3, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
View(classifier)
myData <- readland.tps("data/root-data-shape.tps", specID = "ID")
#read your csv with classifiers
temp <- read.csv("data/root-data-shape.csv")
classifier <- data.frame(name=temp$image)
for(i in 1:nrow(classifier)){
temp <- strsplit(as.character(classifier$name[i]), "-")
classifier$genotype[i] <- temp[[1]][3]
classifier$treatment[i] <- temp[[1]][4]
}
# Make the procust analysis
proc <- procGPA(myData)
# Get the values from the PCA
classifier$PC1 <- proc$scores[,1]
classifier$PC2 <- proc$scores[,2]
classifier$PC3 <- proc$scores[,3]
# get the mean shape
shape <- data.frame(x = proc$mshape[,1], y = -proc$mshape[,2])
# Get the deviations
rotPC1 <-  proc$pcar[, 1]
rotPC2 <-  proc$pcar[, 2]
rotPC3 <-  proc$pcar[, 3]
sdPC1 <- proc$pcasd[1]
sdPC2 <- proc$pcasd[2]
sdPC3 <- proc$pcasd[3]
# Base plot
plot <- ggplot(data = shape, aes(x=x, y=y))
for(i in 1:proc$n){
temp <- data.frame(x=proc$rotated[,1,i], y=-proc$rotated[,2,i])
plot <- plot + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour="#00000030")
}
plot <- plot + geom_polygon(fill="transparent", size=2, colour="#00000080")  + theme_bw()
devs <- c(-3, 3)
col <- c("#FF605D", "#00B94E")
### PC1
plot1 <- plot + ggtitle(paste("PC1 [",round(proc$percent[1],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC1 * sdPC1
k <- length(proc$mshape[,1])
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot1 <- plot1 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
### PC2
plot2 <- plot + ggtitle(paste("PC2 [",round(proc$percent[2],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC2 * sdPC2
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot2 <- plot2 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
### PC3
plot3 <- plot + ggtitle(paste("PC3 [",round(proc$percent[3],2),"%]"))
for(i in 1:length(devs)){
fig <- proc$mshape + devs[i] * rotPC3 * sdPC3
k <- length(proc$mshape)/2
temp <- data.frame(x= fig[1:k], y=-fig[(k + 1):(2 * k)])
plot3 <- plot3 + geom_polygon(data=temp, aes(x=x, y=y), fill="transparent",colour=col[i], size=1)
}
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1.5, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1, fill = genotype) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep=""))
grid.arrange(arrangeGrob(plot1, plot2, plot3, ncol=1), pcaplot, ncol=2)
grid.arrange(arrangeGrob(plot1, plot2, ncol=1), pcaplot, ncol=2)
grid.arrange(plot1, plot2, pcaplot, ncol=3)
grid.arrange(plot1, plot2, pcaplot, width=c(1, 1, 1.5), ncol=3)
grid.arrange(plot1, plot2, pcaplot,ncol=3)
ggsave("shape.pdf", height = 8, width = 16, units = "cm",
useDingbats = FALSE)
grid.arrange(plot1, plot2, pcaplot,ncol=3) +
ggsave("shape.pdf", height = 8, width = 16, units = "cm",
useDingbats = FALSE)
grid.arrange(plot1, plot2, pcaplot, ncol=3) +
ggsave("shape.pdf", height = 8, width = 16, units = "cm",
useDingbats = FALSE)
grid.arrange(plot1, plot2, pcaplot, ncol=3)
ggsave("shape.pdf", height = 8, width = 16, units = "cm",
useDingbats = FALSE)
grid.arrange(plot1, plot2, pcaplot, ncol=3)
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
g <- grid.arrange(plot1, plot2, pcaplot, ncol=3)
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
arrangeGrob(plot1, plot2, pcaplot, ncol=3)
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
g <- arrangeGrob(plot1, plot2, pcaplot, ncol=3)
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
g <- arrangeGrob(plot1, plot2, pcaplot,  ncol=3, widths=c(1, 1, 1.2))
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
g <- arrangeGrob(plot1, plot2, pcaplot,  ncol=3, widths=c(1, 1, 1.5))
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
g <- arrangeGrob(plot1, plot2, pcaplot,  ncol=3, widths=c(1, 1, 1.75))
ggsave("shape.pdf", g,  height = 8, width = 16, units = "cm",
useDingbats = FALSE)
ggsave("shape.pdf", g,  height = 8, width = 20, units = "cm",
useDingbats = FALSE)
ggsave("shape.pdf", g,  height = 8, width = 18, units = "cm",
useDingbats = FALSE)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1, fill = genotype) +
coord_fixed(ratio = 1) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep="")) +
ggsave("shape_PCA.pdf", g,  height = 8, width = 18, units = "cm",
useDingbats = FALSE)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1, fill = genotype) +
coord_fixed(ratio = 1) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep="")) +
ggsave("shape_PCA.pdf", g,  height = 8, width = 10, units = "cm",
useDingbats = FALSE)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1, fill = genotype) +
coord_fixed(ratio = 1) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep="")) +
ggsave("shape_PCA.pdf", height = 8, width = 10, units = "cm",
useDingbats = FALSE)
pcaplot <- qplot(data = classifier, x = PC1, y = PC2, colour = genotype, main="Shape Analysis") +
stat_ellipse(level = 0.95, size=1, fill = genotype) +
coord_fixed(ratio = 1) +
theme_bw() +
scale_x_continuous(name=paste("PC1 (",round(proc$percent[1],2),"%)",sep="")) +
scale_y_continuous(name=paste("PC2 (",round(proc$percent[2],2),"%)",sep="")) +
ggsave("shape_PCA.pdf", height = 10, width = 12, units = "cm",
useDingbats = FALSE)
global <- read.csv("data/high-root-data-global.csv")
global_tidy <- global %>%
separate(image, into = c("experiment", "das", "accession", "plant",
"aq"), sep = "-")
ggplot(global_tidy, aes(x = accession, y = width, colour = accession)) +
geom_boxplot() +
geom_point(size = 3, position=position_jitter()) +
labs(x = "accession", y = "Width (cm)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggsave("width.pdf", height = 8, width = 8, units = "cm",
useDingbats = FALSE)
aov.width <- aov(width ~ accession, data = global_tidy)
summary(aov.width)
# area
ggplot(global_tidy, aes(x = accession, y = convexhull, colour = accession)) +
geom_boxplot() +
geom_point(size = 3, position=position_jitter()) +
labs(x = "accession", y = "Root Area (cm2)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggsave("area.pdf", height = 8, width = 8, units = "cm",
useDingbats = FALSE)
aov.area <- aov(convexhull ~ accession, data = global_tidy)
summary(aov.area)
# shoot area
ggplot(global_tidy, aes(x = accession, y = shoot_area, colour = accession)) +
geom_boxplot() +
geom_point(size = 3, position=position_jitter()) +
labs(x = "accession", y = "Shoot Area (cm2)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggsave("shoot_area.pdf", height = 8, width = 8, units = "cm",
useDingbats = FALSE)
aov.shoot_area <- aov(shoot_area ~ accession, data = global_tidy)
summary(aov.shoot_area)
# depth
ggplot(global_tidy, aes(x = accession, y = depth, colour = accession)) +
geom_boxplot() +
geom_point(size = 3, position=position_jitter()) +
labs(x = "accession ", y = "Depth (cm)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggsave("depth.pdf", height = 8, width = 8, units = "cm",
useDingbats = FALSE)
aov.depth <- aov(depth ~ accession, data = global_tidy)
summary(aov.depth)
# Aspect ratio
ggplot(global_tidy, aes(x = accession, y = ar, colour = accession)) +
geom_boxplot() +
geom_point(size = 3, position=position_jitter()) +
labs(x = "accession ", y = "Depth/width") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggsave("ar.pdf", height = 8, width = 8, units = "cm",
useDingbats = FALSE)
aov.ar <- aov(ar ~ accession, data = global_tidy)
summary(aov.ar)
View(global)
View(global_tidy)
wilcox.test(accesion ~ ar, data=global_tidy)
wilcox.test(accession ~ ar, data=global_tidy)
global_tidy %>&
filter (accession == bay, accession == sha)
global_tidy %>&
filter (accession == "bay", accession == "sha")
global_tidy %>&
filter (accession == "bay" | accession == "sha")
global_tidy %>%
filter (accession == "bay" | accession == "sha")
global_tidy %>%
filter (accession == "bay" | accession == "sha") %>%
wilcox.test(accesion ~ ar)
bay_sha <- global_tidy %>%
filter (accession == "bay" | accession == "sha")
View(bay_sha)
View(global_tidy)
View(bay_sha)
wilcox.test(accesion ~ ar, data = bay_sha)
wilcox.test(accession ~ ar, data = bay_sha)
wilcox.test(ar ~ accession, data = bay_sha)
bay_col <- global_tidy %>%
filter (accession == "bay" | accession == "col")
wilcox.test(ar ~ accession, data = bay_col)
sha_col <- global_tidy %>%
filter (accession == "sha" | accession == "col")
wilcox.test(ar ~ accession, data = sha_col)
bay_sha <- global_tidy %>%
filter (accession == "bay" | accession == "sha"),
wilcox.test(ar ~ accession, data = bay_sha)
bay_col <- global_tidy %>%
filter (accession == "bay" | accession == "col")
wilcox.test(ar ~ accession, data = bay_col)
sha_col <- global_tidy %>%
filter (accession == "sha" | accession == "col")
wilcox.test(ar ~ accession, data = sha_col)
bay_sha <- global_tidy %>%
filter (accession == "bay" | accession == "sha"),
wilcox.test(area ~ accession, data = bay_sha)
bay_col <- global_tidy %>%
filter (accession == "bay" | accession == "col")
wilcox.test(area ~ accession, data = bay_col)
sha_col <- global_tidy %>%
filter (accession == "sha" | accession == "col")
wilcox.test(area ~ accession, data = sha_col)
bay_sha <- global_tidy %>%
filter (accession == "bay" | accession == "sha"),
wilcox.test(massY ~ accession, data = bay_sha)
bay_col <- global_tidy %>%
filter (accession == "bay" | accession == "col")
wilcox.test(massY ~ accession, data = bay_col)
sha_col <- global_tidy %>%
filter (accession == "sha" | accession == "col")
wilcox.test(massY ~ accession, data = sha_col)
ggplot(global_tidy, x = ar, y = circularity, colour = accessions) +
geom_point()
ggplot(global_tidy, aes(x = ar, y = circularity, colour = accessions)) +
geom_point()
ggplot(global_tidy, aes(x = ar, y = circularity, colour = accession)) +
geom_point()
ggplot(global_tidy, aes(x = ar, y = circularity, colour = accession)) +
geom_point(size = 3) +
theme_bw()
ggplot(global_tidy, aes(x = circularity, y = ar, colour = accession)) +
geom_point(size = 3) +
theme_bw()
ggplot(global_tidy, aes(x = round, y = ar, colour = accession)) +
geom_point(size = 3) +
theme_bw()
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(magrittr)
library(gridExtra)
library(rmarkdown)
library(shapes)
library(geomorph)
global <- read.csv("data/high-root-data-global.csv")
# some data tyding
global_tidy <- global %>%
separate(image, into = c("experiment", "das", "accession", "plant",
"aq"), sep = "-")
write.csv(global_tidy, file = "global")
dir <- read.csv("data/high-root-data-dir.csv")
dir$angle <- abs(dir$angle)
dir_tidy <- dir %>%
separate(image, into = c("experiment", "das", "accession", "plant", "aq"), sep = "-")
write.csv(dir_tidy, file = "dir.csv")
citation("shapes")
citation("geomorph")
library(shiny)
runGitHub("DeviumWeb", "dgrapov")
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(magrittr)
library(gridExtra)
library(rmarkdown)
library(shapes)
library(geomorph)
dir <- read.csv("data/high-root-data-dir.csv")
View(dir)
dir$angle <- abs(dir$angle)
dir_tidy <- dir %>%
separate(image, into = c("experiment", "das", "accession", "plant", "aq"), sep = "-")
View(dir_tidy)
ggplot(dir_tidy, aes(x = angle, y = count, colour = accession)) +
facet_grid(~ accession) +
geom_smooth()+
geom_point(size = 3, alpha = 0.5) +
labs(x = "Angle", y = "count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme_bw()
ggplot(dir_tidy, aes(x = angle, y = count, colour = accession)) +
geom_point(alpha = 0.5) +
geom_smooth()+
facet_grid(~ accession) +
labs(x = "Angle", y = "count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
dir_tidy %>%
filter(experiment == 59) %>%
ggplot(aes(x = angle, y = count, shape = experiment)) +
facet_grid(plant ~ accession, scales = "free") +
geom_point(size = 2, alpha = 0.2) +
labs(x = "Angle", y = "count") +
ylim(0, 2.5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
